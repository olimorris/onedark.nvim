local util = require("plenary.async.util")

local async = require("plenary.async.tests")

describe("Using the cache", function()
    async.before_each(function()
        vim.cmd(":e tests/stubs/test.txt")
        vim.o.background = "dark"
    end)

    async.it("it should be able to generate a file", function()
        util.scheduler()
        require("onedarkpro.lib.cache").generate(true)
        assert.equals(require("onedarkpro.lib.cache").exists(), true)
    end)

    async.it("it should be able to generate a file which includes custom colors and groups", function()
        util.scheduler()

        local expected = [[-------------------------- AUTOGENERATED BY ONEDARKPRO -------------------------

if vim.g.colors_name then
  vim.cmd("hi clear")
end

vim.api.nvim_set_hl(0, "@constant.builtin.rust", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "@constructor.javascript", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "@constructor.python", { bold = true, fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "@field.rust", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "@field.yaml", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "@function.builtin.php", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "@function.builtin.rust", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "@function.call.ruby", { bold = true, fg = "#61afef" })
vim.api.nvim_set_hl(0, "@function.call.yaml", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "@function.macro.rust", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "@function.ruby", { bold = true, fg = "#61afef" })
vim.api.nvim_set_hl(0, "@include.ruby", { fg = "#61afef", italic = true })
vim.api.nvim_set_hl(0, "@keyword.javascript", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "@keyword.php", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "@keyword.return.javascript", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "@keyword.return.php", { link = "@keyword.php" })
vim.api.nvim_set_hl(0, "@keyword.rust", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "@label.ruby", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "@label.rust", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "@method.call.javascript", { bold = true, fg = "#61afef" })
vim.api.nvim_set_hl(0, "@method.call.php", { link = "@method.php" })
vim.api.nvim_set_hl(0, "@method.call.python", { bold = true, fg = "#61afef" })
vim.api.nvim_set_hl(0, "@method.javascript", { bold = true, fg = "#61afef" })
vim.api.nvim_set_hl(0, "@method.php", { bold = true, fg = "#61afef" })
vim.api.nvim_set_hl(0, "@namespace.php", { bold = true, fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "@operator.rust", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "@operator.toml", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "@parameter.markdown_inline", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "@parameter.ruby", { fg = "#abb2bf", italic = true })
vim.api.nvim_set_hl(0, "@parameter.rust", { fg = "#e06c75", italic = true })
vim.api.nvim_set_hl(0, "@parameter.yaml", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "@property.toml", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "@punctuation.bracket.javascript", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "@punctuation.bracket.ruby", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "@punctuation.bracket.yaml", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "@punctuation.delimiter.markdown_inline", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "@punctuation.special.markdown", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "@string.yaml", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "@symbol.ruby", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "@text.literal.markdown_inline", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "@text.reference.markdown_inline", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "@text.strong.markdown_inline", { bold = true, fg = "#d19a66" })
vim.api.nvim_set_hl(0, "@text.title.markdown", { bold = true, fg = "#e06c75" })
vim.api.nvim_set_hl(0, "@text.uri.markdown_inline", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "@variable.builtin.javascript", { fg = "#e5c07b", italic = true })
vim.api.nvim_set_hl(0, "@variable.builtin.python", { fg = "#e5c07b", italic = true })
vim.api.nvim_set_hl(0, "@variable.javascript", { fg = "#e06c75", italic = true })
vim.api.nvim_set_hl(0, "Bold", { bold = true })
vim.api.nvim_set_hl(0, "Boolean", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "Character", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "ColorColumn", { bg = "#2E323A" })
vim.api.nvim_set_hl(0, "Comment", { fg = "#5c6370" })
vim.api.nvim_set_hl(0, "Conditional", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Constant", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "Cursor", { bg = "#c678dd", fg = "#282c34" })
vim.api.nvim_set_hl(0, "CursorColumn", { bg = "#5c6370" })
vim.api.nvim_set_hl(0, "CursorLine", { bg = "#282c34" })
vim.api.nvim_set_hl(0, "CursorLineNr", { bg = "#282c34", fg = "#c678dd" })
vim.api.nvim_set_hl(0, "CursorLineNrNC", { bg = "#2E323A", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "CursorLineNrNCQuickFix", { bg = "#282c34", fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Define", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Delimiter", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "DiffAdd", { bg = "#003e4a" })
vim.api.nvim_set_hl(0, "DiffDelete", { bg = "#501b20" })
vim.api.nvim_set_hl(0, "DiffText", { bg = "#005869" })
vim.api.nvim_set_hl(0, "Directory", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "EndOfBuffer", { fg = "#282c34" })
vim.api.nvim_set_hl(0, "Error", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "ErrorMsg", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "Exception", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Float", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "FloatBorder", { bg = "#22252C", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "FoldColumn", { bg = "#282c34", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "Folded", { bg = "#282c34", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "FoldedNC", { bg = "#2E323A", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "Function", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "Identifier", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "IncSearch", { bg = "#53565D", fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "Include", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Italic", { italic = true })
vim.api.nvim_set_hl(0, "Keyword", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Label", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "LineNr", { bg = "#282c34", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "LineNrNC", { bg = "#2E323A", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "Macro", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "MatchParen", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "ModeMsg", { link = "Normal" })
vim.api.nvim_set_hl(0, "MoreMsg", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "MsgArea", { link = "ModeMsg" })
vim.api.nvim_set_hl(0, "MsgSeparator", { link = "ModeMsg" })
vim.api.nvim_set_hl(0, "NonText", { bg = "#282c34", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "Normal", { bg = "#282c34", fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "NormalFloat", { bg = "#22252C" })
vim.api.nvim_set_hl(0, "NormalNC", { bg = "#282c34", fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "Number", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "OneDarkPro", { fg = "#FF0000" })
vim.api.nvim_set_hl(0, "Operator", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "Pmenu", { bg = "#22252C" })
vim.api.nvim_set_hl(0, "PmenuSbar", { bg = "#2E323A" })
vim.api.nvim_set_hl(0, "PmenuSel", { bg = "#2E323A" })
vim.api.nvim_set_hl(0, "PmenuThumb", { bg = "#94969A" })
vim.api.nvim_set_hl(0, "PreCondit", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "PreProc", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "Question", { bg = "#282c34", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "QuickFixLine", { bg = "#282c34" })
vim.api.nvim_set_hl(0, "QuickFixLineNC", { bg = "#282c34" })
vim.api.nvim_set_hl(0, "Repeat", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Search", { bg = "#53565D", fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "SignColumn", { bg = "#282c34" })
vim.api.nvim_set_hl(0, "SignColumnNC", { bg = "#2E323A", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "Special", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "SpecialChar", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "SpecialComment", { fg = "#5c6370" })
vim.api.nvim_set_hl(0, "SpellBad", { fg = "#e06c75", sp = "#e06c75", undercurl = true })
vim.api.nvim_set_hl(0, "SpellCap", { fg = "#e06c75", sp = "#e06c75", undercurl = true })
vim.api.nvim_set_hl(0, "SpellLocal", { fg = "#e06c75", sp = "#e06c75", undercurl = true })
vim.api.nvim_set_hl(0, "SpellRare", { fg = "#e06c75", sp = "#e06c75", undercurl = true })
vim.api.nvim_set_hl(0, "Statement", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "StatusLine", { bg = "#282c34", bold = true, fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "StatusLineNC", { bg = "#282c34", fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "StorageClass", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "String", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "Structure", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Substitute", { bg = "#e5c07b", fg = "#282c34" })
vim.api.nvim_set_hl(0, "TSAnnotation", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSAttribute", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSBoolean", { link = "Boolean" })
vim.api.nvim_set_hl(0, "TSCharacter", { link = "Character" })
vim.api.nvim_set_hl(0, "TSComment", { link = "Comment" })
vim.api.nvim_set_hl(0, "TSConditional", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSConstBuiltin", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSConstMacro", { link = "TSConstant" })
vim.api.nvim_set_hl(0, "TSConstant", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "TSConstructor", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "TSDanger", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSEnvironment", { link = "Macro" })
vim.api.nvim_set_hl(0, "TSEnvironmentName", { link = "Type" })
vim.api.nvim_set_hl(0, "TSError", { link = "Error" })
vim.api.nvim_set_hl(0, "TSException", { link = "Exception" })
vim.api.nvim_set_hl(0, "TSField", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSFloat", { link = "Float" })
vim.api.nvim_set_hl(0, "TSFuncBuiltin", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "TSFuncMacro", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "TSFunction", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "TSInclude", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSKeyword", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSKeywordFunction", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSKeywordOperator", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSKeywordReturn", { link = "TSKeyword" })
vim.api.nvim_set_hl(0, "TSLabel", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSLiteral", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSMath", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSMethod", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "TSNamespace", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "TSNote", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSNumber", { fg = "#d19a66" })
vim.api.nvim_set_hl(0, "TSOperator", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "TSParameter", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSParameterReference", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSProperty", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSPunctBracket", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSPunctDelimiter", { link = "Delimiter" })
vim.api.nvim_set_hl(0, "TSPunctSpecial", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSRepeat", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TSStrike", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSString", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "TSStringEscape", { fg = "#56b6c2" })
vim.api.nvim_set_hl(0, "TSStringRegex", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "TSStringSpecial", { link = "Special" })
vim.api.nvim_set_hl(0, "TSStrong", { link = "Bold" })
vim.api.nvim_set_hl(0, "TSSymbol", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSTag", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSTagAttribute", { link = "TSProperty" })
vim.api.nvim_set_hl(0, "TSTagDelimiter", { link = "Delimiter" })
vim.api.nvim_set_hl(0, "TSText", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSTextReference", { link = "TSText" })
vim.api.nvim_set_hl(0, "TSTitle", { fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TSType", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "TSTypeBuiltin", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "TSURI", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "TSUnderline", { link = "Underlined" })
vim.api.nvim_set_hl(0, "TSVariable", { fg = "#e06c75" })
vim.api.nvim_set_hl(0, "TSVariableBuiltin", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "TSWarning", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "TabLine", { bg = "#282c34" })
vim.api.nvim_set_hl(0, "TabLineFill", { bg = "#282c34", fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "TabLineSel", { bg = "#5c6370", fg = "#c678dd" })
vim.api.nvim_set_hl(0, "TermCursor", { bg = "#c678dd" })
vim.api.nvim_set_hl(0, "TermCursorNC", { bg = "#5c6370" })
vim.api.nvim_set_hl(0, "Title", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "Todo", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Type", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "Typedef", { fg = "#c678dd" })
vim.api.nvim_set_hl(0, "Underlined", { underline = true })
vim.api.nvim_set_hl(0, "VertSplit", { bg = "#282c34", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "Visual", { bg = "#53565D" })
vim.api.nvim_set_hl(0, "VisualNOS", { link = "Visual" })
vim.api.nvim_set_hl(0, "WarningMsg", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "Whitespace", { fg = "#5c6370" })
vim.api.nvim_set_hl(0, "WildMenu", { bg = "#61afef", fg = "#282c34" })
vim.api.nvim_set_hl(0, "WinBar", { bg = "#282c34", fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "WinBarNC", { bg = "#282c34", fg = "#abb2bf" })
vim.api.nvim_set_hl(0, "WinSeparator", { bg = "#282c34", fg = "#5c6370" })
vim.api.nvim_set_hl(0, "diffAdded", { fg = "#98c379" })
vim.api.nvim_set_hl(0, "diffChanged", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "diffFile", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "diffLine", { fg = "#61afef" })
vim.api.nvim_set_hl(0, "diffNewFile", { fg = "#e5c07b" })
vim.api.nvim_set_hl(0, "diffRemoved", { fg = "#e06c75" })

-------------------------------------// END ------------------------------------
]]

        local file = io.open(require("onedarkpro.config").config.cache_path .. "onedark.lua", "r"):read("*all")
        -- file:close()
        assert.are.same(file, expected)
    end)

    async.it("it should be able to delete the cache file", function()
        util.scheduler()
        vim.cmd("OnedarkproClean")
        assert.equals(require("onedarkpro.lib.cache").exists(), false)
    end)
end)
